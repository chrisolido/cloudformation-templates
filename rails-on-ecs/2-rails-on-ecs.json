{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Metadata": {
        "AWS::CloudFormation::Interface": {
            "ParameterGroups": [
                {
                    "Label": {
                        "default": "SSH Configuration"
                    },
                    "Parameters": [
                        "KeyName",
                        "SSHLocation"
                    ]
                },
                {
                    "Label": {
                        "default": "Application Configuration"
                    },
                    "Parameters": [
                        "ApplicationSize",
                        "DesiredEC2Capacity",
                        "MaxEC2Instances"
                    ]
                },
                {
                    "Label": {
                        "default": "ECS Configuration"
                    },
                    "Parameters": [
                        "DesiredServicesNumber",
                        "MaxServicesNumber"
                    ]
                },
                {
                    "Label": {
                        "default": "Database Configuration"
                    },
                    "Parameters": [
                        "DatabaseName",
                        "DatabaseUser",
                        "DatabasePassword",
                        "DatabaseCapacity",
                        "SnapshotToRestore"
                    ]
                }
            ]
        }
    },
    "Parameters": {
        "KeyName": {
            "Type": "AWS::EC2::KeyPair::KeyName",
            "Description": "Name of an existing EC2 KeyPair to enable SSH access to the ECS instances."
        },
        "SSHLocation": {
            "Description": "The IP address range that can be used to SSH to the EC2 instances.",
            "Type": "String",
            "MinLength": "9",
            "MaxLength": "18",
            "Default": "0.0.0.0/0",
            "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
        },
        "DesiredEC2Capacity": {
            "Type": "Number",
            "Default": 1,
            "Description": "Number of EC2 instances to launch in your ECS cluster."
        },
        "MaxEC2Instances": {
            "Type": "Number",
            "Default": 2,
            "Description": "Maximum number of EC2 instances that can be launched in your ECS cluster."
        },
        "DesiredServicesNumber": {
            "Type": "Number",
            "Default": 2,
            "Description": "Number of ECS services to launch in your ECS cluster."
        },
        "MaxServicesNumber": {
            "Type": "Number",
            "Default": 4,
            "Description": "Maximum number of ECS services that can be launched in your ECS cluster."
        },
        "ApplicationSize": {
            "Type": "String",
            "Default": "DEV",
            "AllowedValues": [
                "DEV",
                "SMALL",
                "MEDIUM",
                "LARGE"
            ],
            "Description": "Select Application Size (S,M,L)"
        },
        "DatabaseName": {
            "Type": "String",
            "Default": "postgres",
            "MinLength": 1,
            "MaxLength": 64,
            "AllowedPattern": "[a-zA-Z][a-zA-Z0-9]*"
        },
        "DatabaseUser": {
            "Type": "String",
            "Default": "yourusername",
            "MinLength": 1,
            "MaxLength": 16,
            "AllowedPattern": "[a-zA-Z][a-zA-Z0-9]*"
        },
        "DatabasePassword": {
            "Type": "String",
            "Default": "yourpassword",
            "MinLength": 8,
            "MaxLength": 41,
            "AllowedPattern": "[a-zA-Z0-9~!#$%^&]*",
            "NoEcho": true
        },
        "DatabaseCapacity": {
            "Type": "String",
            "Default": "5",
            "AllowedPattern": "[0-9]+",
            "Description": "Database Storage Capacity in GB"
        },
        "SnapshotToRestore": {
            "Description": "Restore from existing RDS snapshot (not required)",
            "Type": "String",
            "Default": ""
        }
    },
    "Conditions": {
        "isRestore": {
            "Fn::Not": [
                {
                    "Fn::Equals": [
                        {
                            "Ref": "SnapshotToRestore"
                        },
                        ""
                    ]
                }
            ]
        }
    },
    "Mappings": {
        "AWSRegionToAMI": {
            "us-east-1": {
                "ECSAMI": "ami-0a6b7e0cc0b1f464f"
            },
            "us-east-2": {
                "ECSAMI": "ami-037a92bf1efdb11a2"
            },
            "us-west-1": {
                "ECSAMI": "ami-0184f498956de7db5"
            },
            "us-west-2": {
                "ECSAMI": "ami-0c1f4871ebaae6d86"
            },
            "ca-central-1": {
                "ECSAMI": "ami-02c80e9173258d289"
            },
            "eu-west-1": {
                "ECSAMI": "ami-0acc9f8be17a41897"
            },
            "eu-west-2": {
                "ECSAMI": "ami-0b5225210a12d9951"
            },
            "eu-west-3": {
                "ECSAMI": "ami-0caadc4f0db31a303"
            },
            "eu-central-1": {
                "ECSAMI": "ami-055aa9664ef169e25"
            },
            "ap-northeast-1": {
                "ECSAMI": "ami-0c38293d60d98af86"
            },
            "ap-northeast-2": {
                "ECSAMI": "ami-0bdc871079baf9649"
            },
            "ap-southeast-1": {
                "ECSAMI": "ami-0e28ff4e3f1776d86"
            },
            "ap-southeast-2": {
                "ECSAMI": "ami-0eed1c915ea891aca"
            },
            "ap-south-1": {
                "ECSAMI": "ami-0b7c3be99909df6ef"
            },
            "sa-east-1": {
                "ECSAMI": "ami-078146697425f25a7"
            }
        },
        "InstanceSize": {
            "DEV": {
                "EC2": "t2.micro",
                "DB": "db.t2.micro"
            },
            "SMALL": {
                "EC2": "t3.small",
                "DB": "db.t2.small"
            },
            "MEDIUM": {
                "EC2": "t3.medium",
                "DB": "db.t2.medium"
            },
            "LARGE": {
                "EC2": "m5.large",
                "DB": "db.m5.large"
            }
        }
    },
    "Resources": {
        "ECSCluster": {
            "Type": "AWS::ECS::Cluster"
        },
        "CloudwatchLogsGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
                "LogGroupName": {
                    "Fn::Sub": "ECSLogGroup-${AWS::StackName}"
                },
                "RetentionInDays": 14
            }
        },
        "ApplicationLoadBalancer": {
            "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
            "Properties": {
                "Scheme": "internet-facing",
                "LoadBalancerAttributes": [
                    {
                        "Key": "idle_timeout.timeout_seconds",
                        "Value": 30
                    }
                ],
                "Subnets": [
                    {
                        "Fn::ImportValue": "shared-vpc-public-subnet1"
                    },
                    {
                        "Fn::ImportValue": "shared-vpc-public-subnet2"
                    }
                ],
                "SecurityGroups": [
                    {
                        "Ref": "ECSSecurityGroup"
                    }
                ]
            }
        },
        "ALBListener": {
            "Type": "AWS::ElasticLoadBalancingV2::Listener",
            "Properties": {
                "DefaultActions": [
                    {
                        "Type": "forward",
                        "TargetGroupArn": {
                            "Ref": "ECSTargetGroup"
                        }
                    }
                ],
                "LoadBalancerArn": {
                    "Ref": "ApplicationLoadBalancer"
                },
                "Port": 80,
                "Protocol": "HTTP"
            }
        },
        "ALBListenerRule": {
            "Type": "AWS::ElasticLoadBalancingV2::ListenerRule",
            "DependsOn": "ALBListener",
            "Properties": {
                "Actions": [
                    {
                        "Type": "forward",
                        "TargetGroupArn": {
                            "Ref": "ECSTargetGroup"
                        }
                    }
                ],
                "Conditions": [
                    {
                        "Field": "path-pattern",
                        "Values": [
                            "/"
                        ]
                    }
                ],
                "ListenerArn": {
                    "Ref": "ALBListener"
                },
                "Priority": 1
            }
        },
        "ECSTargetGroup": {
            "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
            "DependsOn": "ApplicationLoadBalancer",
            "Properties": {
                "HealthCheckIntervalSeconds": 10,
                "HealthCheckPath": "/",
                "HealthCheckProtocol": "HTTP",
                "HealthCheckTimeoutSeconds": 5,
                "HealthyThresholdCount": 2,
                "Port": 80,
                "Protocol": "HTTP",
                "UnhealthyThresholdCount": 2,
                "VpcId": {
                    "Fn::ImportValue": "shared-vpc-id"
                }
            }
        },
        "EC2AutoScalingGroup": {
            "Type": "AWS::AutoScaling::AutoScalingGroup",
            "Properties": {
                "VPCZoneIdentifier": [
                    {
                        "Fn::ImportValue": "shared-vpc-public-subnet1"
                    },
                    {
                        "Fn::ImportValue": "shared-vpc-public-subnet2"
                    }
                ],
                "LaunchConfigurationName": {
                    "Ref": "ClusterLaunchConfiguration"
                },
                "MinSize": 1,
                "MaxSize": {
                    "Ref": "MaxEC2Instances"
                },
                "DesiredCapacity": {
                    "Ref": "DesiredEC2Capacity"
                }
            },
            "CreationPolicy": {
                "ResourceSignal": {
                    "Count": {
                        "Ref": "DesiredEC2Capacity"
                    },
                    "Timeout": "PT15M"
                }
            },
            "UpdatePolicy": {
                "AutoScalingReplacingUpdate": {
                    "WillReplace": true
                }
            }
        },
        "ECSSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "ECS Security Group",
                "VpcId": {
                    "Fn::ImportValue": "shared-vpc-id"
                },
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": 22,
                        "ToPort": 22,
                        "CidrIp": {
                            "Ref": "SSHLocation"
                        }
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": 80,
                        "ToPort": 80,
                        "CidrIp": "0.0.0.0/0"
                    }
                ]
            }
        },
        "ECSSecurityGroupALBIngress": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "GroupId": {
                    "Ref": "ECSSecurityGroup"
                },
                "IpProtocol": "tcp",
                "FromPort": 32768,
                "ToPort": 61000,
                "SourceSecurityGroupId": {
                    "Ref": "ECSSecurityGroup"
                }
            }
        },
        "ClusterLaunchConfiguration": {
            "Type": "AWS::AutoScaling::LaunchConfiguration",
            "Properties": {
                "ImageId": {
                    "Fn::FindInMap": [
                        "AWSRegionToAMI",
                        {
                            "Ref": "AWS::Region"
                        },
                        "ECSAMI"
                    ]
                },
                "SecurityGroups": [
                    {
                        "Ref": "ECSSecurityGroup"
                    }
                ],
                "InstanceType": {
                    "Fn::FindInMap": [
                        "InstanceSize",
                        {
                            "Ref": "ApplicationSize"
                        },
                        "EC2"
                    ]
                },
                "IamInstanceProfile": {
                    "Fn::ImportValue": "cluster-instance-profile"
                },
                "KeyName": {
                    "Ref": "KeyName"
                },
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Sub": "#!/bin/bash\nyum update -y\necho ECS_CLUSTER=${ECSCluster} >> /etc/ecs/ecs.config\nyum install -y aws-cfn-bootstrap\n/opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource EC2AutoScalingGroup --region ${AWS::Region}\n"
                    }
                }
            }
        },
        "RailsTaskDefinition": {
            "Type": "AWS::ECS::TaskDefinition",
            "Properties": {
                "Family": {
                    "Fn::Sub": "${AWS::StackName}-rails-on-ecs"
                },
                "ContainerDefinitions": [
                    {
                        "Name": "web",
                        "Cpu": 10,
                        "Memory": 256,
                        "Essential": true,
                        "Image": "tyh835/rails-web",
                        "WorkingDirectory": "/usr/src/app",
                        "EntryPoint": [
                            "/usr/src/app/db-migrations.sh"
                        ],
                        "Command": [
                            "bundle",
                            "exec",
                            "rails server -p 3000 -b '0.0.0.0'"
                        ],
                        "Environment": [
                            {
                                "Name": "RAILS_MAX_THREADS",
                                "Value": 5
                            },
                            {
                                "Name": "RAILS_ENV",
                                "Value": "production"
                            },
                            {
                                "Name": "DATABASE_URL",
                                "Value": {
                                    "Fn::Sub": "postgresql://${DatabaseUser}:${DatabasePassword}@${PostgresRDSInstance.Endpoint.Address}:5432/${DatabaseName}?encoding=utf8&pool=5&timeout=500"
                                }
                            }
                        ],
                        "LogConfiguration": {
                            "LogDriver": "awslogs",
                            "Options": {
                                "awslogs-group": {
                                    "Ref": "CloudwatchLogsGroup"
                                },
                                "awslogs-region": {
                                    "Ref": "AWS::Region"
                                },
                                "awslogs-stream-prefix": "rails-on-ecs"
                            }
                        },
                        "MountPoints": [
                            {
                                "ContainerPath": "/usr/src/app/public",
                                "SourceVolume": "static-files"
                            }
                        ]
                    },
                    {
                        "Name": "nginx",
                        "Cpu": 10,
                        "Memory": 256,
                        "Essential": true,
                        "Image": "tyh835/rails-nginx",
                        "Links": [
                            "web"
                        ],
                        "Environment": [
                            {
                                "Name": "BACKEND_NAME",
                                "Value": "web"
                            },
                            {
                                "Name": "BACKEND_PORT",
                                "Value": "3000"
                            },
                            {
                                "Name": "HOST_URL",
                                "Value": {
                                    "Fn::GetAtt": [
                                        "ApplicationLoadBalancer",
                                        "DNSName"
                                    ]
                                }
                            }
                        ],
                        "LogConfiguration": {
                            "LogDriver": "awslogs",
                            "Options": {
                                "awslogs-group": {
                                    "Ref": "CloudwatchLogsGroup"
                                },
                                "awslogs-region": {
                                    "Ref": "AWS::Region"
                                },
                                "awslogs-stream-prefix": "rails-on-ecs"
                            }
                        },
                        "MountPoints": [
                            {
                                "ContainerPath": "/usr/share/nginx/html",
                                "SourceVolume": "static-files",
                                "ReadOnly": true
                            }
                        ],
                        "PortMappings": [
                            {
                                "ContainerPort": 80
                            }
                        ]
                    }
                ],
                "Volumes": [
                    {
                        "Name": "static-files"
                    }
                ]
            }
        },
        "RailsService": {
            "Type": "AWS::ECS::Service",
            "DependsOn": "ALBListener",
            "Properties": {
                "Cluster": {
                    "Ref": "ECSCluster"
                },
                "DesiredCount": {
                    "Ref": "DesiredServicesNumber"
                },
                "LoadBalancers": [
                    {
                        "ContainerName": "nginx",
                        "ContainerPort": 80,
                        "TargetGroupArn": {
                            "Ref": "ECSTargetGroup"
                        }
                    }
                ],
                "Role": {
                    "Fn::ImportValue": "ecs-service-role"
                },
                "TaskDefinition": {
                    "Ref": "RailsTaskDefinition"
                }
            }
        },
        "ServiceScalingTarget": {
            "Type": "AWS::ApplicationAutoScaling::ScalableTarget",
            "Properties": {
                "MaxCapacity": {
                    "Ref": "MaxServicesNumber"
                },
                "MinCapacity": 1,
                "ResourceId": {
                    "Fn::Sub": "service/${ECSCluster}/${RailsService.Name}"
                },
                "RoleARN": {
                    "Fn::ImportValue": "autoscaling-role-arn"
                },
                "ScalableDimension": "ecs:service:DesiredCount",
                "ServiceNamespace": "ecs"
            }
        },
        "ServiceScalingPolicy": {
            "Type": "AWS::ApplicationAutoScaling::ScalingPolicy",
            "Properties": {
                "PolicyName": {
                    "Fn::Sub": "${AWS::StackName}-ServiceScalingPolicy"
                },
                "PolicyType": "StepScaling",
                "ScalingTargetId": {
                    "Ref": "ServiceScalingTarget"
                },
                "StepScalingPolicyConfiguration": {
                    "AdjustmentType": "PercentChangeInCapacity",
                    "Cooldown": 60,
                    "MetricAggregationType": "Average",
                    "StepAdjustments": [
                        {
                            "MetricIntervalLowerBound": 0,
                            "ScalingAdjustment": 200
                        }
                    ]
                }
            }
        },
        "ALB500sAlarmScaleUp": {
            "Type": "AWS::CloudWatch::Alarm",
            "Properties": {
                "EvaluationPeriods": 1,
                "Statistic": "Average",
                "Threshold": 10,
                "AlarmDescription": "Alarm if our ALB generates too many HTTP 500s",
                "Period": 60,
                "AlarmActions": [
                    {
                        "Ref": "ServiceScalingPolicy"
                    }
                ],
                "MetricName": {
                    "Fn::Sub": "${AWS::StackName}-ALBStatus500"
                },
                "Namespace": "AWS/ApplicationLB",
                "Dimensions": [
                    {
                        "Name": "LoadBalancer",
                        "Value": {
                            "Fn::GetAtt": [
                                "ApplicationLoadBalancer",
                                "LoadBalancerFullName"
                            ]
                        }
                    }
                ],
                "ComparisonOperator": "GreaterThanThreshold"
            }
        },
        "PostgresRDSInstance": {
            "Type": "AWS::RDS::DBInstance",
            "DeletionPolicy": "Snapshot",
            "Properties": {
                "AllocatedStorage": {
                    "Ref": "DatabaseCapacity"
                },
                "StorageType": "gp2",
                "BackupRetentionPeriod": "7",
                "DBName": {
                    "Fn::If": [
                        "isRestore",
                        {
                            "Ref": "AWS::NoValue"
                        },
                        {
                            "Ref": "DatabaseName"
                        }
                    ]
                },
                "Engine": "postgres",
                "EngineVersion": "10.6",
                "DBSubnetGroupName": {
                    "Ref": "DBSubnetGroup"
                },
                "MasterUsername": {
                    "Fn::If": [
                        "isRestore",
                        {
                            "Ref": "AWS::NoValue"
                        },
                        {
                            "Ref": "DatabaseUser"
                        }
                    ]
                },
                "MasterUserPassword": {
                    "Fn::If": [
                        "isRestore",
                        {
                            "Ref": "AWS::NoValue"
                        },
                        {
                            "Ref": "DatabasePassword"
                        }
                    ]
                },
                "DBSnapshotIdentifier": {
                    "Fn::If": [
                        "isRestore",
                        {
                            "Ref": "SnapshotToRestore"
                        },
                        {
                            "Ref": "AWS::NoValue"
                        }
                    ]
                },
                "DBInstanceClass": {
                    "Fn::FindInMap": [
                        "InstanceSize",
                        {
                            "Ref": "ApplicationSize"
                        },
                        "DB"
                    ]
                },
                "VPCSecurityGroups": [
                    {
                        "Ref": "DBSecurityGroup"
                    }
                ]
            }
        },
        "DBSubnetGroup": {
            "Type": "AWS::RDS::DBSubnetGroup",
            "Properties": {
                "DBSubnetGroupDescription": "RDS Subnet Group",
                "SubnetIds": [
                    {
                        "Fn::ImportValue": "shared-vpc-private-subnet1"
                    },
                    {
                        "Fn::ImportValue": "shared-vpc-private-subnet2"
                    }
                ]
            }
        },
        "DBSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "RDS Security Group",
                "VpcId": {
                    "Fn::ImportValue": "shared-vpc-id"
                },
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": 5432,
                        "ToPort": 5432,
                        "SourceSecurityGroupId": {
                            "Ref": "ECSSecurityGroup"
                        }
                    }
                ]
            }
        }
    },
    "Outputs": {
        "ApplicationURL": {
            "Description": "Your Application URL",
            "Value": {
                "Fn::Sub": "http://${ApplicationLoadBalancer.DNSName}"
            }
        }
    }
}