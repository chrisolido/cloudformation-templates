{
    "Parameters": {
        "AppVersion": {
            "Type": "String",
            "Description": "Application Version to Deploy"
        },
        "EnvironmentSize": {
            "Type": "String",
            "Default": "SMALL",
            "AllowedValues": [
                "SMALL",
                "MEDIUM",
                "LARGE",
                "XLARGE"
            ],
            "Description": "Select Environment Size (S,M,L)"
        },
        "KeyPair": {
            "Description": "Amazon EC2 Key Pair for SSH Access",
            "Type": "AWS::EC2::KeyPair::KeyName"
        },
        "SSHLocation": {
            "Description": "The IP address range that can be used to SSH to the EC2 instances",
            "Type": "String",
            "MinLength": "9",
            "MaxLength": "18",
            "Default": "0.0.0.0/0",
            "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
            "ConstraintDescription": "Must be a valid IP CIDR range of the form x.x.x.x/x."
        },
        "AppPublicCIDR1": {
            "Type": "String",
            "Description": "CIDR to use for Public Subnet 1 for App Environment (x.x.x.x/24)",
            "MinLength": 9,
            "MaxLength": 18,
            "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/24",
            "ConstraintDescription": "Must be a valid CIDR range in the form x.x.x.x/24"
        },
        "AppPublicCIDR2": {
            "Type": "String",
            "Description": "CIDR to use for Public Subnet 2 for App Environment (x.x.x.x/24)",
            "MinLength": 9,
            "MaxLength": 18,
            "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/24",
            "ConstraintDescription": "Must be a valid CIDR range in the form x.x.x.x/24"
        }
    },
    "Mappings": {
        "RegionMap": {
            "us-east-1": {
                "AMALINUX": "ami-013be31976ca2c322"
            },
            "us-east-2": {
                "AMALINUX": "ami-0b59bfac6be064b78"
            },
            "us-west-1": {
                "AMALINUX": "ami-01beb64058d271bc4"
            },
            "us-west-2": {
                "AMALINUX": "ami-061e7ebbc234015fe"
            },
            "ca-central-1": {
                "AMALINUX": "ami-076b4adb3f90cd384"
            },
            "eu-central-1": {
                "AMALINUX": "ami-02ea8f348fa28c108"
            },
            "eu-west-1": {
                "AMALINUX": "ami-0a5e707736615003c"
            },
            "eu-west-2": {
                "AMALINUX": "ami-0274e11dced17bb5b"
            },
            "eu-west-3": {
                "AMALINUX": "ami-051707cdba246187b"
            },
            "ap-northeast-1": {
                "AMALINUX": "ami-0a2de1c3b415889d2"
            },
            "ap-northeast-2": {
                "AMALINUX": "ami-0b4fdb56a00adb616"
            },
            "ap-south-1": {
                "AMALINUX": "ami-06bcd1131b2f55803"
            },
            "ap-southeast-1": {
                "AMALINUX": "ami-085fd1bd447be68e8"
            },
            "ap-southeast-2": {
                "AMALINUX": "ami-0b8dea0e70b969adc"
            },
            "sa-east-1": {
                "AMALINUX": "ami-0112d42866980b373"
            }
        },
        "InstanceSize": {
            "SMALL": {
                "EC2": "t2.micro",
                "DB": "db.t2.micro"
            },
            "MEDIUM": {
                "EC2": "t3.small",
                "DB": "db.t2.small"
            },
            "LARGE": {
                "EC2": "t3.medium",
                "DB": "db.t2.medium"
            },
            "XLARGE": {
                "EC2": "m5.large",
                "DB": "db.t2.large"
            }
        }
    },
    "Resources": {
        "PublicSubnet1": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "AvailabilityZone": {
                    "Fn::Select": [
                        0,
                        {
                            "Fn::GetAZs": ""
                        }
                    ]
                },
                "CidrBlock": {
                    "Ref": "AppPublicCIDR1"
                },
                "MapPublicIpOnLaunch": true,
                "VpcId": {
                    "Fn::ImportValue": "shared-vpc-id"
                }
            }
        },
        "PublicSubnet2": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "AvailabilityZone": {
                    "Fn::Select": [
                        1,
                        {
                            "Fn::GetAZs": ""
                        }
                    ]
                },
                "CidrBlock": {
                    "Ref": "AppPublicCIDR2"
                },
                "MapPublicIpOnLaunch": true,
                "VpcId": {
                    "Fn::ImportValue": "shared-vpc-id"
                }
            }
        },
        "SubnetRouteTableAssociatePublic1": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "RouteTableId": {
                    "Fn::ImportValue": "shared-vpc-public-rt"
                },
                "SubnetId": {
                    "Ref": "PublicSubnet1"
                }
            }
        },
        "SubnetRouteTableAssociatePublic2": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "RouteTableId": {
                    "Fn::ImportValue": "shared-vpc-public-rt"
                },
                "SubnetId": {
                    "Ref": "PublicSubnet2"
                }
            }
        },
        "ElasticLoadBalancer": {
            "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
            "Properties": {
                "CrossZone": true,
                "Instances": [
                    {
                        "Ref": "EC2Instance"
                    }
                ],
                "Listeners": [
                    {
                        "InstancePort": "80",
                        "InstanceProtocol": "HTTP",
                        "LoadBalancerPort": "80",
                        "Protocol": "HTTP"
                    }
                ],
                "Subnets": [
                    {
                        "Ref": "PublicSubnet1"
                    },
                    {
                        "Ref": "PublicSubnet2"
                    }
                ],
                "SecurityGroups": [
                    {
                        "Ref": "SecurityGroup"
                    }
                ]
            }
        },
        "SecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": {
                    "Fn::Join": [
                        "",
                        [
                            "Stack ",
                            {
                                "Ref": "AWS::StackId"
                            },
                            " v",
                            {
                                "Ref": "AppVersion"
                            },
                            " - ",
                            {
                                "Ref": "EnvironmentSize"
                            }
                        ]
                    ]
                },
                "VpcId": {
                    "Fn::ImportValue": "shared-vpc-id"
                },
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "ToPort": 80,
                        "FromPort": 80,
                        "CidrIp": "0.0.0.0/0"
                    },
                    {
                        "IpProtocol": "tcp",
                        "ToPort": 22,
                        "FromPort": 22,
                        "CidrIp": {
                            "Ref": "SSHLocation"
                        }
                    }
                ]
            }
        },
        "EC2Instance": {
            "Type": "AWS::EC2::Instance",
            "DeletionPolicy": "Delete",
            "CreationPolicy": {
                "ResourceSignal": {
                    "Timeout": "PT5M"
                }
            },
            "Properties": {
                "ImageId": {
                    "Fn::FindInMap": [
                        "RegionMap",
                        {
                            "Ref": "AWS::Region"
                        },
                        "AMALINUX"
                    ]
                },
                "InstanceType": {
                    "Fn::FindInMap": [
                        "InstanceSize",
                        {
                            "Ref": "EnvironmentSize"
                        },
                        "EC2"
                    ]
                },
                "KeyName": {
                    "Ref": "KeyPair"
                },
                "SecurityGroupIds": [
                    {
                        "Fn::GetAtt": [
                            "SecurityGroup",
                            "GroupId"
                        ]
                    }
                ],
                "SubnetId": {
                    "Ref": "PublicSubnet1"
                },
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Sub": "#!/bin/bash\nyum update -y\n/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource EC2Instance --configsets www --region ${AWS::Region}\ncurl 127.0.0.1/app.php | grep -f /var/www/html/test.pattern\n/opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource EC2Instance --region ${AWS::Region}\n"
                    }
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Init": {
                    "configSets": {
                        "www": [
                            "configure_cfn",
                            "install_www",
                            "config_app"
                        ]
                    },
                    "configure_cfn": {
                        "files": {
                            "/etc/cfn/hooks.d/cfn-auto-reloader.conf": {
                                "content": {
                                    "Fn::Sub": "[cfn-auto-reloader-hook]\ntriggers=post.update\npath=Resources.EC2.Metadata.AWS::CloudFormation::Init\naction=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource EC2Instance --configsets www --region ${AWS::Region}\n"
                                },
                                "mode": "000400",
                                "owner": "root",
                                "group": "root"
                            },
                            "/etc/cfn/cfn-hup.conf": {
                                "content": {
                                    "Fn::Sub": "[main]\nstack=${AWS::StackId}\nregion=${AWS::Region}\nverbose=true\ninterval=5\n"
                                },
                                "mode": "000400",
                                "owner": "root",
                                "group": "root"
                            }
                        },
                        "services": {
                            "sysvinit": {
                                "cfn-hup": {
                                    "enabled": "true",
                                    "ensureRunning": "true",
                                    "files": [
                                        "/etc/cfn/cfn-hup.conf",
                                        "/etc/cfn/hooks.d/cfn-auto-reloader.conf"
                                    ]
                                }
                            }
                        }
                    },
                    "install_www": {
                        "packages": {
                            "yum": {
                                "httpd": [],
                                "php": []
                            }
                        },
                        "services": {
                            "sysvinit": {
                                "httpd": {
                                    "enabled": "true",
                                    "ensureRunning": "true"
                                }
                            }
                        }
                    },
                    "config_app": {
                        "sources": {
                            "/var/www/html": {
                                "Fn::Join": [
                                    "",
                                    [
                                        {
                                            "Fn::ImportValue": "shared-vpc-bucket"
                                        },
                                        "/App-",
                                        {
                                            "Ref": "AppVersion"
                                        },
                                        ".zip"
                                    ]
                                ]
                            }
                        },
                        "files": {
                            "/var/www/html/test.pattern.zip": {
                                "source": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            {
                                                "Fn::ImportValue": "shared-vpc-bucket"
                                            },
                                            "/Test-",
                                            {
                                                "Ref": "AppVersion"
                                            },
                                            ".zip"
                                        ]
                                    ]
                                },
                                "mode": "000644",
                                "owner": "root",
                                "group": "root"
                            }
                        },
                        "commands": {
                            "unzippattern": {
                                "cwd": "/var/www/html",
                                "command": "unzip -o test.pattern.zip"
                            }
                        }
                    }
                }
            }
        }
    },
    "Outputs": {
        "Endpoint": {
            "Description": "Application URL",
            "Value": {
                "Fn::Sub": "http://${ElasticLoadBalancer.DNSName}/app.php"
            }
        }
    }
}