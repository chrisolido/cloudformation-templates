AWSTemplateFormatVersion: "2010-09-09"
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "App Environment Configuration"
        Parameters:
          - AppVersion
          - EnvironmentSize
          - KeyPair
          - SSHLocation
          - MinSize
          - MaxSize
          - DesiredCapacity
      - Label:
          default: "App Environment Networking"
        Parameters:
          - AppPublicCIDR1
          - AppPublicCIDR2
Parameters:
  AppVersion:
    Type: String
    Description: Application Version to Deploy
  EC2InstanceSize:
    Type: String
    Default: DEV
    AllowedValues:
      - DEV
      - SMALL
      - MEDIUM
      - LARGE
    Description: Select Environment Size (S,M,L)
  KeyPair:
    Description: Amazon EC2 Key Pair for SSH Access
    Type: AWS::EC2::KeyPair::KeyName
  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: "9"
    MaxLength: "18"
    Default: 0.0.0.0/0
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x.
  MinSize:
    Type: String
    Description: Minimum number of EC2 instances
    Default: "1"
  MaxSize:
    Type: String
    Description: Minimum number of EC2 instances (Desired x 2)
    Default: "2"
  DesiredCapacity:
    Type: String
    Description: Desired number of EC2 instances
    Default: "1"
  AppPublicCIDR1:
    Type: String
    Description: CIDR to use for Public Subnet 1 for App Environment (x.x.x.x/24)
    MinLength: 9
    MaxLength: 18
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/24"
    ConstraintDescription: Must be a valid CIDR range in the form x.x.x.x/24
  AppPublicCIDR2:
    Type: String
    Description: CIDR to use for Public Subnet 2 for App Environment (x.x.x.x/24)
    MinLength: 9
    MaxLength: 18
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/24"
    ConstraintDescription: Must be a valid CIDR range in the form x.x.x.x/24
Mappings:
  RegionMap:
    us-east-1:
      AMALINUX: ami-013be31976ca2c322
    us-east-2:
      AMALINUX: ami-0b59bfac6be064b78
    us-west-1:
      AMALINUX: ami-01beb64058d271bc4
    us-west-2:
      AMALINUX: ami-061e7ebbc234015fe
    ca-central-1:
      AMALINUX: ami-076b4adb3f90cd384
    eu-central-1:
      AMALINUX: ami-02ea8f348fa28c108
    eu-west-1:
      AMALINUX: ami-0a5e707736615003c
    eu-west-2:
      AMALINUX: ami-0274e11dced17bb5b
    eu-west-3:
      AMALINUX: ami-051707cdba246187b
    ap-northeast-1:
      AMALINUX: ami-0a2de1c3b415889d2
    ap-northeast-2:
      AMALINUX: ami-0b4fdb56a00adb616
    ap-south-1:
      AMALINUX: ami-06bcd1131b2f55803
    ap-southeast-1:
      AMALINUX: ami-085fd1bd447be68e8
    ap-southeast-2:
      AMALINUX: ami-0b8dea0e70b969adc
    sa-east-1:
      AMALINUX: ami-0112d42866980b373
  EC2InstanceSize:
    DEV: t2.micro
    SMALL: t3.small
    MEDIUM: t3.medium
    LARGE: m5.large
Resources:
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [0, !GetAZs ]
      CidrBlock: !Ref AppPublicCIDR1
      MapPublicIpOnLaunch: true
      VpcId: !ImportValue shared-vpc-id
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [1, !GetAZs ]
      CidrBlock: !Ref AppPublicCIDR2
      MapPublicIpOnLaunch: true
      VpcId: !ImportValue shared-vpc-id
  SubnetRouteTableAssociatePublic1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !ImportValue shared-vpc-public-rt
      SubnetId: !Ref PublicSubnet1
  SubnetRouteTableAssociatePublic2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !ImportValue shared-vpc-public-rt
      SubnetId: !Ref PublicSubnet2
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      SecurityGroups:
        - !Ref ALBSecurityGroup
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn:
            Ref: TargetGroup
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 80
      Protocol: HTTP
      VpcId: !ImportValue shared-vpc-id
  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    CreationPolicy:
      ResourceSignal:
        Count: !Ref DesiredCapacity
        Timeout: PT5M
    Properties:
      Cooldown: "300"
      HealthCheckGracePeriod: 300
      HealthCheckType: ELB
      AvailabilityZones:
        - !Select [0, !GetAZs ]
        - !Select [1, !GetAZs ]
      VPCZoneIdentifier:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      LaunchConfigurationName: !Ref EC2LaunchConfiguration
      MinSize: !Ref MinSize
      MaxSize: !Ref MaxSize
      DesiredCapacity: !Ref DesiredCapacity
      TargetGroupARNs:
        - !Ref TargetGroup
  EC2LaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    CreationPolicy:
      ResourceSignal:
        Timeout: PT5M
    Properties:
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", AMALINUX]
      InstanceType: !FindInMap [EC2InstanceSize, !Ref EC2InstanceSize]
      KeyName: !Ref KeyPair
      SecurityGroups:
        - !Ref EC2SecurityGroup
      UserData:
        "Fn::Base64":
          !Sub |
            #!/bin/bash
            yum update -y
            /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource EC2LaunchConfiguration --configsets www --region ${AWS::Region}
            curl 127.0.0.1/app.php | grep -f /var/www/html/test.pattern
            /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource AutoScalingGroup --region ${AWS::Region}
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          www:
            - "configure_cfn"
            - "install_www"
            - "config_app"
        configure_cfn:
          files:
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.EC2Instance.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource EC2Instance --configsets www --region ${AWS::Region}
              mode: "000400"
              owner: root
              group: root
            /etc/cfn/cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
                verbose=true
                interval=5
              mode: "000400"
              owner: root
              group: root
          services:
            sysvinit:
              cfn-hup:
                enabled: "true"
                ensureRunning: "true"
                files:
                  - "/etc/cfn/cfn-hup.conf"
                  - "/etc/cfn/hooks.d/cfn-auto-reloader.conf"
        install_www:
          packages:
            yum:
              httpd: []
              php: []
          services:
            sysvinit:
              httpd:
                enabled: "true"
                ensureRunning: "true"
        config_app:
          sources:
            /var/www/html: !Join ["", [!ImportValue shared-bucket-url, "/App-", !Ref AppVersion, ".zip"]]
          files:
            /var/www/html/test.pattern.zip:
              source: !Join ["", [!ImportValue shared-bucket-url, "/Test-", !Ref AppVersion, ".zip"]]
              mode: "000644"
              owner: "root"
              group: "root"
          commands:
            unzippattern:
              cwd: "/var/www/html"
              command: "unzip -o test.pattern.zip"
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ALB Security Group
      VpcId: !ImportValue shared-vpc-id
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
  EC2SecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: !Join ["", ["Stack ", !Ref "AWS::StackId", " v", !Ref AppVersion, " - ", !Ref EnvironmentSize]]
      VpcId: !ImportValue shared-vpc-id
      SecurityGroupIngress:
        - IpProtocol: tcp
          ToPort: 22
          FromPort: 22
          CidrIp: !Ref SSHLocation
  EC2InboundRule: # EC2 can only accept HTTP traffic from ALB
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      SourceSecurityGroupId: !GetAtt ALBSecurityGroup.GroupId
      GroupId: !GetAtt EC2SecurityGroup.GroupId
Outputs:
  Endpoint:
    Description: Application URL
    Value: !Sub "http://${ApplicationLoadBalancer.DNSName}/app.php"
